# coding=utf-8

from pox.core import core     #pox核心库
from pox.lib.revent import revent     #pox事件处理库
import pox.openflow.libopenflow_01 as of     #pox的openflow库
from pox.lib.addresses import IPAddr     #pox自带地址转换
from pox.lib.addresses import EthAddr     #pox自带地址转换
import pox.openflow.spanning_tree     #pox网络拓扑结构库
import asyncore     #异步socket包装库
import mysql.connector     #python对mysql数据库的支持
# 该库用于对python基本类型值与用C struct类型之间的转化
import struct
import asynchat     #异步socket命令/相应器
import socket     #socket通信库
import thread     #python对多线
import threading  #的程处理
import os     #该库包括与系统相关的函数
import sys  
import re
import json
import sqlite3
import docker
import time     #python的时间库
import pyinotify     #监视文件系统事件库
import random     #随机库

log = core.getLogger()     #pox的日志系统
SNORT_ADDR = "10.0.0.11"     #Snort IDS所在IP
# 下面这两个字典实现了服务名与对应IP的转换
ip2serv_name = {"10.0.0.1" : "http", "10.0.0.2" : "http"}
serv_name2ip = {"http" : ["10.0.0.1", "10.0.0.2"]}
name2ip = {"httpserver":"10.0.0.1","backserver":"10.0.0.2","snort":"10.0.0.11"}
containers = docker.Client().containers()
images = docker.Client().images()
containerlist = []

gateway_mac=EthAddr("c2:80:74:e0:76:04")     #Snort IDS所在Mac地址
SNORT_DPID = 104067420794952L     #Snort IDS所在switch的dpid
MAXCMD = 100     #读取命令的最大字节数
# 下面五个变量声明了五个安全级别
HIGHER = 5
HIGH = 4
MID = 3
LOWMID = 2
LOW = 1


def find_shortest_route(graph, start, end, path=[]):
    """
    根据graph字典提供的信息计算从start到end的最短路径
    graph的数据结构类似于：
    {s1:([(s2,port1),(s3,port2),...]),s2:([(s1,port),...]),...}
    """
    path = path + [start]
    if start == end:
        return path
    if not graph. has_key(start):
        return None
    shortest = []
    #分析部分，注意用到了递归调用
    start_list = graph[start]
    for item in start_list:
        if item[0] not in path:
            newpath = find_shortest_route(graph, item[0], end, path)
            if newpath:
                if not shortest or len(newpath) < len(shortest):
                    shortest = newpath
    return shortest

def get_shortest_route(graph, start, end):
    """
    根据find_shortest_route的返回值，找到最短路径
    """
    path = []
    route = find_shortest_route(graph, start, end)
    #添加从一个节点到另一个节点的端口信息
    for index in range(0, len(route)-1):
        for item in graph[route[index]]:
            if item[0] == route[index+1]:
                path = path + [(route[index], item[1])]
                break
    path += [route[-1]]
    return path

def image2id(name):
    for image in images:
        if name in image["RepoTags"]:
            return image["Id"]

class Image:
    def __init__(self, imageid, name, id, ip):
        self.imageid = imageid
        self.name = name
        self.id = id
        self.ip = ip
        self.info = {}
        self.funclist = []
        self.cvelist = {}

    def set_info(self,image_file):
        self.info = json.load(open(image_file,'r'))
    
    def set_cvelist(self):
        for pkg_info in self.info.values():
            for cve in pkg_info:
                self.cvelist[cve] = pkg_info[cve]

    def set_funclist(self,policy_file):
        file = open(policy_file,'r')
        policy = file.readlines()
        funclist = []
        for cve in self.cvelist:
            alert = 0
            score = self.cvelist[cve]["score"]
            access_vector = self.cvelist[cve]["access_vector"]
            access_complexity = self.cvelist[cve]["access_complexity"]
            authentication = self.cvelist[cve]["authentication"]
            confidentiality_impact = self.cvelist[cve]["confidentiality_impact"]
            integrity_impact = self.cvelist[cve]["integrity_impact"]
            availability_impact = self.cvelist[cve]["availability_impact"]
            for cmd in policy:
                if ("alert==0" not in cmd) and ("alert == 0" not in cmd):
                    continue
                cmd = cmd.replace('&&', ' and ')
                cmd = cmd.replace('||', ' or ')
                cmd = cmd.replace('!', ' not ')
                cmd = cmd.replace('IF', 'if')
                cmd = cmd.replace('  ',' ')
                cmd = cmd.replace(' THEN ', ':\n')
                cmd = cmd.replace('[', "    funclist.append('")
                cmd = cmd.replace(',', "')\n    funclist.append('")
                cmd = cmd.replace(']', "')")
                cmd = cmd[:-1]
                exec cmd
        self.funclist = sorted(set(funclist),key=funclist.index)

def set_containerlist(info_path,policy_file):
    for container in containers:
        name = container["Names"][0][1:]
        if name not in name2ip.keys():
            continue
        instance = Image(image2id(container["Image"]),name,container["Id"],name2ip[name])
        instance.set_info(info_path + instance.imageid[:12] + "-pkgdata.result.detail")
        instance.set_cvelist()
        instance.set_funclist(policy_file)
        containerlist.append(instance)

def start_server(socket_map):
    """
    该函数在secure类中以子进程形式实现
    """
    asyncore.loop(map = socket_map)

def start_watch(wm, eh):
    """
    该函数在secure类中以子进程形式实现，需要两个参数，其中eh是改写的文件事件处理类
    """
    notifier = pyinotify.Notifier(wm, eh)
    notifier.loop()

class MyEventHandler(pyinotify.ProcessEvent):
    """
    改写后和策略相关函数结合的文件系统事件处理类
    """
    log.info("Starting monitor...")
    def gen_cmd(self, pathname):
        """
        读取pathname路径文件中的内容，即如入策略文件中的策略
        """
        try:
            fd = open(pathname, 'r')
            commands = fd.readlines(MAXCMD)
            fd.close()     #返回值是策略列表
            return commands
        except IOError as e:
            log.error("I/O error ({0}): {1}".format(e.errno, e.strerror))
        return -1
    def func_gen(self, event):
        """
        根据gen_cmd的返回值，生成策略函数，注意该函数调用了secure类中的对应函数以及
        secure类中的func_table,其数据结构如下：
        {priority:{signatrue:{(interval, times):funcname}}}
        """
        commands = self.gen_cmd(event.pathname)
        if not commands == -1:
            core.secure.func_gen(event.name, commands)
            func_name = event.name
            value = func_name.split('_')
            if not core.secure.func_table.has_key(value[0]):
                core.secure.func_table[value[0]]={}
            if not core.secure.func_table[value[0]].has_key(value[1]):
                core.secure.func_table[value[0]][value[1]] = {}
            if (len(value) == 4):
                core.secure.func_table[value[0]][value[1]][(value[2],value[3])] = func_name
            else:
                core.secure.func_table[value[0]][value[1]]["any"] = func_name
    def func_del(self, event):
        """
        与上一方法相反，该方法是在策略文件被移走或删除时删除原来的策略函数，删除过程
        与生成过程恰好相反
        """
        func_name = "func_" + event.name
        try:
            funcname = func_name.replace(" ", "_")
            core.secure.funclist.remove(func_name)
            delattr(core.secure.handlers, funcname)
            value = func_name.split('_')
            del value[0]
            if (len(value) == 4):
                del core.secure.func_table[value[0]][value[1]][(value[2],value[3])]
            else:
                del core.secure.func_table[value[0]][value[1]]["any"]
            log.info("handler %s removed, rules updated."%funcname)
        except ValueError:
            log.error('%s is not in the funclist'%func_name)
    #剩下的方法，全部是重载父类的方法，将文件系统事件与策略函数的生成与删除联系
    def process_IN_MOVED_TO(self, event):
        log.debug('MOVED_TO event: %s'%event.name)
        self.func_gen(event)
    def process_IN_MODIFY(self, event):
        log.debug('MODIFY event: %s'%event.name)
        self.func_del(event)
        self.func_gen(event)
    def process_IN_DELETE(self, event):
        log.debug('DELETE event: %s'%event.name)
        self.func_del(event)
    def process_IN_MOVED_FROM(self, event):
        log.debug('MOVED_FROM event: %s', event.name)
        self.func_del(event)

class AlertIn(revent.Event):
    """
    按照pox的wiki，通过继承revent.Event类自定义事件
    """
    def __init__(self, alertmsg):
        """
        事件初始化，参数为alertmsg列表
        """
        revent.Event.__init__(self)     #先调用父类的初始化
        self.name = alertmsg[0]
        self.priority = alertmsg[1]
        self.src = alertmsg[2]
        self.dst = alertmsg[3]
        self.occation  = alertmsg[4]

class Reminder(revent.EventMixin):
    """
    该类用于触发自定义事件
    """
    _eventMixin_events = set([
        AlertIn,
        ])
    def __init__(self):
        self.msg = None
    def set_msg(self, msg):
        self.msg = msg
    def alert(self):
        self.raiseEvent(AlertIn, self.msg)

class secure_connect(asynchat.async_chat):
    """
    通过继承asynchat.async_chat类，该类用于处理从指定socket接收到的数据，
    即处理传送的报警信息
    """
    def __init__(self, connection, socket_map):
        #先调用父类类初始化
        asynchat.async_chat.__init__(self, connection, map = socket_map)
        self.buf = []
        self.ac_in_buffer_size = 1024
        self.set_terminator("@")     #设置断点
    def collect_incoming_data(self, data):
        self.buf.append(data)
    def found_terminator(self):
        """
        根据断点逐条读取报警信息
        """
        temp = ("".join(self.buf)).split("\n")
        core.Reminder.set_msg(temp)
        core.Reminder.alert()
        self.buf=[]
        self.set_terminator("@")

class secure_server(asyncore.dispatcher):
    """
    通过继承asyncore.dispatcher类，该类用于与远端socket建立连接，即与远端Snort 
    IDS建立通信通道
    """
    def __init__(self, socket_map):
        self.socket_map = socket_map
        # 先调用父类类初始化
        asyncore.dispatcher.__init__(self, map = self.socket_map)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.bind(("0.0.0.0",20000))     #开放端口供远端Snort IDS连接
        self.listen(5)
    def handle_accept(self):
        connection, addr = self.accept()
        # 调用secure_connect类来处理接收到的数据
        server_connect = secure_connect(connection, self.socket_map)

class handlers(object):
    """
    所有策略函数是该类的属性
    """
    def __init__(self):
        pass

class secure(object):

    """
    本程序的核心类 负责各方通信与事件处理
    """

    def start(self):
        """
        初始化：添加监听
        """
        core.openflow.addListeners(self)
        core.openflow_discovery.addListeners(self)

    def __init__(self, path):
        """
        初始化：对secure的属性进行赋值初始化并调用一些方法初始化
        """
        self.path = path     #被监视文件系统的路径
        self.filelist=None     #所监视文件路径下的文件列表
        self.counter=0     #文件计数器
        self.filenum=0     #len(self.filelist)
        # 命令列表（也是策略函数的基本组成部分）
        self.cmdlist = ["disconnect", "wait", "reconnect", "pass", "monitor",\
                        "reset", "redirect", "unredirect", "passit", "refuse"]
	self.handlers = handlers()     #外部类的一个实例
        self.funclist = None     #策略函数名列表
        self.func_table={}     
        #func_table数据结构：
        #{priority:{signatrue:{(interval, times):funcname}}}
        self.alys_cmd()     #对策略文件初始化处理
        self.action_triggered = False 
        self.name_process()     #对funclist中函数初始化
        self.mactable = {}     #用于储存网络结点的信息
        #其数据结构为{"MacAddr":(switchid,port)}
        self.iptable = {}     #用于储存网络结点Mac地址对应的IP
        #其数句结构为{"MacAddr":"IPAddr"}
        self.droplist = {}    #被disconnect的名单列表
        self.monitorlist = {}    #被monitor的名单列表
        self.redirectlist = {}     #被redirect的名单列表
        self.ignorelist = []     #被忽略的名单列表
        self.dangerlist = {}
        self.blacklist = {}
        self.socket_map = {}     #start_server的参数
        self.server = secure_server(self.socket_map)
        #pox的初始化
        core.Reminder.addListeners(self)     
        core.addListener(pox.core.GoingUpEvent, self.start_server)
        core.call_when_ready(self.start, ["openflow_discovery"])
        core.callDelayed(1, self.start_watch)   

    def start_server(self, event):
        """
        初始化：以子进程建立与Snort IDS的通信
        """
        thread.start_new_thread(start_server, (self.socket_map,))

    def start_watch(self):
        """
        初始化：以子进程监听文件是系统
        """
        wm = pyinotify.WatchManager()
        wm.add_watch(self.path, pyinotify.ALL_EVENTS, rec = True)
        eh = MyEventHandler()
        thread.start_new_thread(start_watch, (wm, eh))

    def func_gen(self, File, cmds):
        """
        根据形参cmds生成策略函数
        """
        func_name = "func_" + File
        self.funclist.append(func_name)
        func_name = func_name.replace(" ", "_")     #从策略名到函数名
        cmdgenlist = []
        #将cmds的策略转化为函数语句
        for each in cmds:
            item = each.split('\n')
            action=item[0].split(',')
            if action[0]=="time":
                action[1]=float(action[1])
                func_action = "self."+action[0]+"("+action[1]+")"
            elif action[0] in self.cmdlist:
                if(len(action) == 1):
                    func_action = "self." + action[0] + "()"
                else:
                    func_action = "self."+action[0]+"("+action[1]+")"
            cmdgenlist.append(func_action)
            func_action = ''
        #function相当于定义一个函数的代码
        function = "def "+func_name+"(self, src, dst):\n"
        for command in cmdgenlist:
            function = function+"    "+command+"\n"
        exec function  
        #将策略函数作为handlers这个类的一个属性
        setattr(self.handlers, func_name, eval(func_name))
        log.info("handler %s registered, rules updated."%func_name)

    def alys_file(self):
        """
        读取类成员filelist中的文件
        """
        for File in self.filelist:
            fd = open(self.path + File,'r')
            commands = fd.readlines(MAXCMD)
            fd.close()
            yield File, commands     #迭代器的使用

    def alys_cmd(self):
        """
        通过调用func_gen()与alys_file()完成将指定路径下所有
        的策略文件全部转化为策略函数
        """
        self.filelist = os.listdir(self.path)     #获取策略文件夹结构
        self.funclist = []
        self.filenum = len(self.filelist)
        filegen = self.alys_file()     #迭代调用alys_file()
        while self.counter < self.filenum:
            File,commands = filegen.next()
            self.func_gen(File, commands)     #调用func_gen()
            self.counter += 1

    def passit(self):
        """
        跳过该动作，即什么都不执行
        """
        self.action_triggered = True     #动作开关变为开

    def disconnect(self,addr):
        """
        切断所给IP流量的流入流出
        """
        self.action_triggered = False     #先将动作开关置为关
        #判断所给addr是否在droplisit中，如果在，对应值加1
        if self.droplist.has_key(addr):
            self.droplist[addr] += 1
        else:
            self.droplist[addr] = 1
        if self.droplist[addr] != 1:
            return
        ipaddr = IPAddr(addr)     #地址转换
        msg = of.ofp_flow_mod()
        msg.priority = MID     #设置安全级别，也就是流表的优先级
        if self.iptable.has_key(ipaddr) and self.iptable[ipaddr] != gateway_mac:
            #阻断内网机器的流量
            host_mac = self.iptable[ipaddr]
            switchid = self.mactable[host_mac][0]
            msg.match.dl_type = 0x0800
            msg.match.dl_src = host_mac
            #具体的阻断通过OFPP_NONE实现
            msg.actions.append(of.ofp_action_output(port = of.OFPP_NONE))
        else:
            switchid = self.mactable[gateway_mac][0]
            msg.match.dl_type = 0x0800
            msg.match.nw_src = ipaddr
            msg.actions.append(of.ofp_action_output(port = of.OFPP_NONE))
        switch = core.openflow.getConnection(switchid)
        switch.send(msg)
        self.action_triggered = True     #将动作开关置为开
        log.info("%s being disconncted"%addr)

    def refuse(self,addr):
        self.action_triggered = False
        if len(self.blacklist) > 0:
            for ip in self.blacklist.keys():
                if self.blacklist[ip] == 0:
                    msg = of.ofp_flow_mod()
                    msg.priority = HIGHER
                    msg.match.dl_type = 0x0800
                    msg.match.nw_src = IPAddr(ip)
                    msg.actions.append(of.ofp_action_output(port = of.OFPP_NONE))
                    core.openflow.getConnection(SNORT_DPID).send(msg)
                    self.blacklist[ip] = 1;
                    log.info("all the request of %s being refused"%ip)
        self.action_triggered = True


    def redirect(self,addr):
        """
        在某台内网机器被disconnect后将被阻断流量重定向到另一台机器
        """
        self.action_triggered = False     #先将动作开关置为关
        ipaddr = IPAddr(addr)
        #判断所给ip是否提供网络服务
        if not ip2serv_name.has_key(addr):
            return
        #判断所给ip是否在redirectlist中，如果在，值加1
        if self.redirectlist.has_key(addr):
            self.redirectlist[addr] += 1
        else:
            self.redirectlist[addr] = 1
        if self.redirectlist[addr] == 1:
            if self.droplist.has_key(addr):
                if ip2serv_name.has_key(addr):
                    serv_name = ip2serv_name[addr]
                    if serv_name2ip.has_key(serv_name):
                    	Masterip = serv_name2ip[serv_name][0]     #定义主服务器
                    	Masteraddr = IPAddr(Masterip)
                        livelist = [ item for item in serv_name2ip[serv_name] if item not in self.droplist ]
                        if len(livelist) > 0:
                            new_ip = random.choice(livelist)     #在可用备用服务器中随机选择一台
                            log.info("redirecting for %s to %s \nin the service of %s"%(addr, str(new_ip), serv_name))
                            new_mac = self.iptable[IPAddr(new_ip)]
                            #流表处理
                            msg = of.ofp_flow_mod()
                            msg.match.dl_dst = self.iptable[Masteraddr]
                            msg.actions.append(of.ofp_action_dl_addr.set_dst(new_mac))
                            msg.actions.append(of.ofp_action_nw_addr.set_dst(IPAddr(new_ip)))
                            msg.priority = HIGH      #设置安全级别，即优先级
                            routelist = get_shortest_route(pox.openflow.spanning_tree._calc_spanning_tree(), self.mactable[gateway_mac][0], self.mactable[new_mac][0])
                            routelist[-1] = self.mactable[new_mac]
                            msg.actions.append(of.ofp_action_output(port = routelist[0][1]))
                            switchid = self.mactable[gateway_mac][0]
                            switch = core.openflow.getConnection(switchid)
                            switch.send(msg)
                            #流表处理
                            msg = of.ofp_flow_mod()
                            msg.match.dl_src = self.iptable[IPAddr(new_ip)]
                            msg.match.dl_dst = gateway_mac
                            msg.priority = HIGH
                            msg.actions.append(of.ofp_action_dl_addr.set_src(self.iptable[ipaddr]))
                            msg.actions.append(of.ofp_action_nw_addr.set_src(ipaddr))
                            msg.actions.append(of.ofp_action_output(port = self.mactable[gateway_mac][1]))
                            switchid = self.mactable[gateway_mac][0]
                            switch = core.openflow.getConnection(switchid)
                            switch.send(msg)
                            self.action_triggered = True
                        else:
                            log.error("no more same service ip to redirect")
                    else:
                        log.error("check the service to ip dictionary %s"%serv_name)
                else:
                    log.error("check the ip to service dictionary %s"%addr)
            else:
                log.error("%s is not in droplist"%addr)

    def wait(self,arg):
        """
        等待指定时间，相当于休眠
        """
        log.info("waiting for %d seconds"%arg)
        time.sleep(arg)     #调用系统的time类函数

    def reconnect(self,addr):
        """
        解除disconnect
        """
        self.action_triggered = False     #先将动作开关置为关
        self.droplist[addr] -= 1     #其droplist中对应值减1
        if self.droplist[addr] <= 0:
            ipaddr = IPAddr(addr)
            self.droplist[addr] = 0
            log.info("%s being reconnected"%addr)
            #流表处理
            msg = of.ofp_flow_mod()
            msg.command = of.OFPFC_DELETE_STRICT      #通过删除相关流表实现
            msg.priority = MID     #设置安全级别，即优先级
            msg.actions.append(of.ofp_action_output(port = of.OFPP_NONE))
            if self.iptable.has_key(ipaddr) and self.iptable[ipaddr] != gateway_mac:
                host_mac = self.iptable[ipaddr]
                switchid = self.mactable[host_mac][0]
                msg.match.dl_type = 0x0800
                msg.match.dl_src = host_mac
            else:
                switchid = self.mactable[gateway_mac][0]
                msg.match.dl_type = 0x0800
                msg.match.nw_src = ipaddr
            switch = core.openflow.getConnection(switchid)
            switch.send(msg)
            self.action_triggered = True     #将动作开关置为开

    def monitor(self, addr):
        """
        监视指定IP的流量
        """
        self.action_triggered = False     #先将动作开关置为关
        ipaddr = IPAddr(addr)
        if not self.iptable.has_key(ipaddr):
            return
        if self.iptable[ipaddr] == gateway_mac:
            return
        #判断所给ip是否在monitorlist中，如果在，值加1
        if self.monitorlist.has_key(addr):
            self.monitorlist[addr] += 1
        else:
            self.monitorlist[addr] = 1
        if self.monitorlist[addr] == 1:
            log.info("packet from/to %s mirrored for monitoring"%addr)
            #流表处理
            msg = of.ofp_flow_mod()
            msg.priority = LOWMID
            msg.match.dl_src = self.iptable[ipaddr]
            msg.match.dl_type = 0x0800
            msg.actions.append(of.ofp_action_dl_addr.set_dst(gateway_mac))
            #调用全局函数计算最短路由
            routelist = get_shortest_route(pox.openflow.spanning_tree._calc_spanning_tree(), self.mactable[self.iptable[ipaddr]][0], self.mactable[gateway_mac][0])
            routelist[-1] = self.mactable[gateway_mac]
            #根据最短路由设置流表
            msg.actions.append(of.ofp_action_output(port = routelist[0][1]))
            switchid = self.mactable[self.iptable[ipaddr]][0]
            switch = core.openflow.getConnection(switchid)
            switch.send(msg)
            self.action_triggered = True     #将动作开关置为开

    def reset(self, addr):
        """
        重置曾经对所给IP的策略动作
        """
        self.action_triggered = False     #先将动作开关置为关
        self.monitorlist[addr] -= 1
        if self.monitorlist[addr] > 0:
            return
        self.monitorlist[addr] = 0
        log.info("resetting %s"%addr)
        #流表处理
        msg = of.ofp_flow_mod()
        msg.command = of.OFPFC_DELETE_STRICT     #具体实现通过删除相关流表
        ipaddr = IPAddr(addr)
        host_mac = self.iptable[ipaddr]
        msg.match.dl_src = host_mac
        switchid = self.mactable[host_mac][0]
        switch = core.openflow.getConnection(switchid)
        switch.send(msg)
        self.action_triggered = True     #将动作开关置为开

    def unredirect(self, addr):
        """
        解除redirect
        """
        self.action_triggered = False     #先将动作开关置为关
        self.redirectlist[addr] -= 1     #redirectlist中对应值减1
        if self.redirectlist[addr] > 0:
            return
        self.redirectlist[addr] = 0
        log.info("unredirecting %s"%addr)
        #流表处理
        msg = of.ofp_flow_mod()
        msg.command = of.OFPFC_DELETE_STRICT     #具体实现通过删除相关流表
        msg.priority = HIGHER
        serv_name = ip2serv_name[addr]
        Masterip = serv_name2ip[serv_name][0]     #定义主服务器
        Masteraddr = IPAddr(Masterip)
        host_mac = self.iptable[Masteraddr]
        msg.match.dl_dst = host_mac
        msg.match.of_ip_src = Masterip
        switchid = self.mactable[gateway_mac][0]
        switch = core.openflow.getConnection(switchid)
        switch.send(msg)
        self.action_triggered = True

    def name_process(self):
        """
        将funclist中的函数名写入到func_table中
        """
        for func_name in self.funclist:
            value = func_name.split('_')
            del value[0]     #相当于删除"func"
            #下面的写入方式，请参考策略匹配流程理解
            if not self.func_table.has_key(value[0]):
                self.func_table[value[0]]={}
            if not self.func_table[value[0]].has_key(value[1]):
                self.func_table[value[0]][value[1]] = {}
            if (len(value) == 4):
                self.func_table[value[0]][value[1]][(value[2],value[3])] = func_name
            else:
                self.func_table[value[0]][value[1]]["any"] = func_name

#{priority:{signatrue:{(interval, times):funcname}}}

    def occa_process(self, occation, during):
        """
        对AlertIn传来的occation参数和策略文件中提供的
        time参数进行处理
        """
        #调用系统的time库来对时间进行相关处理
        timeArray = time.strptime(occation, "%Y-%m-%d %H:%M:%S")
        timeStamp = time.mktime(timeArray)
        timeStamp -= float(during)
        timeArray = time.localtime(timeStamp)
        before = time.strftime("%Y-%m-%d %H:%M:%S", timeArray)  
        #根据sql()的需要返回一个时间参数
        return before

    def _handle_AlertIn(self, event):
        """
        对AlertIn的相应和处理，并进行策略匹配
        """
        log.info("Alert In.")     #向pox内核日志发送报警信息
        #获取event参数
        sig = event.name
        occation = event.occation
        priority = event.priority
        sip  = event.src
        dip  = event.dst
        #判断来源IP所在主机是否被攻击
        if self.monitorlist.has_key(sip) and self.monitorlist[sip] > 0 and not sig in self.ignorelist:
            log.info("%s is under attack and may have been captured, so disconncet it."%sip)
            self.disconnect(sip)     #断掉被攻击主机
        #策略匹配，请结合策略匹配流程进行理解
        func_name = "func_"
        if self.func_table.has_key(priority):
            func_name += priority
            #精确匹配
            if self.func_table[priority].has_key(sig):
                func_name += "_" + sig
                if (len(self.func_table[priority][sig]) == 1) and (self.func_table[priority][sig].keys()[0] == "any"):
                    func_name += "_any"
                else:
                    timelist = [item for item in self.func_table[priority][sig].keys()]
                    flag = False
                    for time in timelist:
                        before = self.occa_process(occation, time[0])
                        times = self.sql(before, occation, sip, dip)
                        log.info("this has happened:%d times"%times)
                        if times >= int(time[1]):
                            func_name += "_" + time[0] + "_" + time[1]
                            flag = True
                            break
                    if not flag:
                        if (self.func_table[priority][sig].has_key("any")):
                            func_name += "_any"
                        else:
                            log.error("No Strategy")
                            return
            #模糊匹配
            elif (self.func_table[priority].has_key("any")):     
                func_name += "_any"
                if (len(self.func_table[priority]["any"]) == 1) and (self.func_table[priority][sig][self.func_table[priority]["any"].keys()[0]] == "any"):
                    func_name += "_any"
                else:
                    timelist = [item for item in self.func_table[priority]["any"].keys()]
                    flag = False
                    for time in timelist:
                        before = self.occa_process(occation, time[0])
                        times = self.sql(before, occation, sip, dip)
                        log.info("this has happened:%d times"%times)
                        if times >= int(time[1]):
                            func_name += "_" + time[0] + "_" + time[1]
                            flag = True
                            break
                    if not flag:
                        if (self.func_table[priority]["any"].has_key("any")):
                            func_name += "_any"
                        else:
                            log.error("No Strategy")
                            return
            else:
                log.error("No Strategy for signatrue %s"%sig)
                return
        else:
            log.error("No Strategy for priority %s"%priority)
            return
        func_name = func_name.replace(" ", "_")
        #以子进程触发对应策略函数
        new_th = threading.Thread(target = getattr(self.handlers, func_name), args=(self, sip, dip))
        new_th.start()

    def sql(self, before, occation, src, dst):
        """
        通过调取mysql数据库中snort这个database里的信息，
        反馈某事件过去某时间段内发生的次数
        """
        #连接数据库
        try:
            conn = mysql.connector.connect(host=SNORT_ADDR, user='root',passwd='root',db='snort')
        except Exception, e:
           log.error(e)
        cursor = conn.cursor()
        #执行数据库命令进行查询
        cursor.execute("select count(*) as times from iphdr,event where (event.timestamp between '%s' and '%s') and (iphdr.ip_src=%d and iphdr.ip_dst=%d) and iphdr.cid=event.cid;"%(before, occation, socket.ntohl(struct.unpack("I", socket.inet_aton(src))[0]), socket.ntohl(struct.unpack("I", socket.inet_aton(dst))[0])))
        #保存查询结果
        rows = cursor.fetchone()
        #关闭数据库并断开与数据库的连接
        cursor.close()
        conn.close()
        #返回查询结果
        return rows[0]

    def _handle_ConnectionUp(self, event):
        pass

    def _handle_PacketIn(self, event):
        """
        在初始阶段switch内无流表时对到达switch的包进行解析，
        获取整个网络的拓扑结构和网络结点信息
        """
        packet = event.parsed     #对到达的包进行解析
        #定义flood方法，即向任何端口发包
        def flood(switch):      
	    msg = of.ofp_packet_out()
            msg.actions.append(of.ofp_action_output(port = of.OFPP_FLOOD))
            msg.data = event.ofp
            msg.in_port = event.port
            switch.send(msg)
        #定义drop方法，即不向任何端口发包
        def drop(switch):
	    msg = of.ofp_packet_out()
            msg.buffer_id = event.ofp.buffer_id
            msg.in_port = event.port
            switch.send(msg)
        ip = packet.find("ipv4")     #判断包的类别
        if ip == None: 
            ip = packet.find("icmp")
        if ip:
            if not self.iptable.has_key(ip.srcip):
                self.iptable[ip.srcip] = packet.src     #保存包来源的Mac地址和IP
        #保存包来源的所在switch的dpid和其对应switch端口
        if not self.mactable.has_key(packet.src):
            self.mactable[packet.src] = (event.dpid, event.port)     
        #对不同类型的包采取不同策略
        if packet.type == packet.LLDP_TYPE or packet.dst.isBridgeFiltered():
            drop(event.connection)
            return
        if packet.dst.is_multicast:
            flood(event.connection)
        else:
            if not self.mactable.has_key(packet.dst):
	        flood(event.connection)
            else:
                #调用全局函数计算最短路由
	        routelist = get_shortest_route(pox.openflow.spanning_tree._calc_spanning_tree(), event.dpid, self.mactable[packet.dst][0])
	        routelist[-1] = self.mactable[packet.dst]
	        msg = of.ofp_packet_out()
                msg.data = event.ofp
                msg.actions.append(of.ofp_action_output(port = routelist[0][1]))
                event.connection.send(msg)
                #设置流表
	        for switchid,out_port in routelist:
	            msg = of.ofp_flow_mod()
                    msg.table_id = 0
                    msg.priority = LOW     #设置安全级别，即优先级
	            msg.match.dl_dst = packet.dst
	            msg.actions.append(of.ofp_action_output(port = out_port))
                    #如果是内网主机，使得流量均经过snort进行检查
                    if switchid == SNORT_DPID:
                        msg.actions.append(of.ofp_action_output(port = 10))
                    msg.idle_timeout = 10    
                    msg.hard_timeout = 30     #设置hard_timeout，经过该时间后流变自动删除
	            switch = core.openflow.getConnection(switchid)
	            switch.send(msg)

def launch():
    """
    启动组件
    """
    path = "/home/dracula/pox/rules/"     #指定策略文件夹路径
    core.registerNew(Reminder)     #向pox内核注册Reminder类
    core.registerNew(secure, path)     #向pox内核注册secure类
    log.info("Secure module launched.")
    set_containerlist("/home/dracula/dans/result/dans/details/","/home/dracula/dans/scripts/policy")
    for each in containerlist:
        print each.funclist
